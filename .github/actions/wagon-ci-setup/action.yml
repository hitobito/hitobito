name: "Setup steps for wagon CI"
description: "DRY yaml setup setup steps which are used multiple times in the wagon CI workflow"

inputs:
  migrations:
    description: Unless set to false, migrations will be run as part of the setup.
    default: "true"
  assets:
    description: Unless set to false, the assets compilation will be run as part of the setup.
    default: "true"
  wagon_repository:
    description: "Wagon repository, e.g. hitobito_pbs"
  wagon_dependency_repository:
    description: A wagon this wagon depends on, e.g. hitobito_youth
    required: false
    default: ""
  core_ref:
    description: Use a specific version of the core for the workflow run. Defaults to master.
    default: ""
  wagon_dependency_ref:
    description: Use a specific version of the wagon dependency for the workflow run. Defaults to master.
    default: ""

runs:
  using: composite
  steps:
    - name: "Determine common branch and set branch name for core"
      if: github.event_name != 'pull_request'
      env:
        INPUT_CORE_REF: ${{ inputs.core_ref }}
      run: |
        CORE_REF="$INPUT_CORE_REF"
        if [ -z "$INPUT_CORE_REF" ]; then
          CORE_REF=$(git ls-remote --heads https://github.com/hitobito/hitobito | cut -d/ -f3- | grep -x "${{github.ref_name}}" || echo 'master')
        fi

        echo "CORE_REF=$CORE_REF" >> $GITHUB_ENV
      shell: bash

    - name: "Determine common branch and set branch name for dependency repo"
      if: (github.event_name != 'pull_request') && (inputs.wagon_dependency_repository != '')
      env:
        WAGON_DEPENDENCY_REPO: ${{ inputs.wagon_dependency_repository }}
        INPUT_WDEP_REF: ${{ inputs.wagon_dependency_ref }}
      run: |
        WAGON_DEPENDENCY_REF="$INPUT_WDEP_REF"
        if [ -z "$INPUT_WDEP_REF" ] && [ "$WAGON_DEPENDENCY_REPO" != '' ]; then
          WAGON_DEPENDENCY_REF=$(git ls-remote --heads https://github.com/hitobito/$WAGON_DEPENDENCY_REPO | cut -d/ -f3- | grep -x "${{github.ref_name}}" || echo 'master')
        fi

        echo "WAGON_DEPENDENCY_REF=$WAGON_DEPENDENCY_REF" >> $GITHUB_ENV
      shell: bash

    - name: "Set branch name"
      if: github.event_name == 'pull_request'
      env:
        WAGON_DEPENDENCY_REPO: ${{ inputs.wagon_dependency_repository }}
        INPUT_WDEP_REF: ${{ inputs.wagon_dependency_ref }}
        INPUT_CORE_REF: ${{ inputs.core_ref }}
      run: |
        WAGON_DEPENDENCY_REF="$INPUT_WDEP_REF"
        if [ -z "${INPUT_WDEP_REF}" ] && [ "${WAGON_DEPENDENCY_REPO}" != '' ]; then
          WAGON_DEPENDENCY_REF=$(git ls-remote --heads https://github.com/hitobito/$WAGON_DEPENDENCY_REPO | cut -d/ -f3- | grep -x "${{github.head_ref}}" || echo 'master')
        fi

        CORE_REF="$INPUT_CORE_REF"
        if [ -z "${INPUT_CORE_REF}" ]; then
          CORE_REF=$(git ls-remote --heads https://github.com/hitobito/hitobito | cut -d/ -f3- | grep -x "${{github.head_ref}}" || echo 'master')
        fi

        echo "WAGON_DEPENDENCY_REF=$WAGON_DEPENDENCY_REF" >> $GITHUB_ENV
        echo "CORE_REF=$CORE_REF" >> $GITHUB_ENV
      shell: bash

    - name: "Checkout hitobito at ${{ env.CORE_REF }}"
      uses: actions/checkout@v4
      with:
        repository: "hitobito/hitobito"
        ref: ${{ env.CORE_REF }}
        path: "hitobito"

    - name: "Set up Ruby"
      env:
        ImageOS: ubuntu20
      uses: ruby/setup-ruby@v1
      with:
        working-directory: hitobito

    - name: "Set up Node"
      uses: actions/setup-node@v4
      with:
        node-version: "14"

    - name: "Setup OS"
      run: |
        sudo apt-get -qq update
        sudo apt-get install libvips42
        echo "ruby version: $(ruby -v)"
        echo "node version: $(node -v)"
        echo "yarn version: $(yarn -v)"
      working-directory: hitobito
      shell: bash

    - name: "Copy Wagonfile.ci"
      run: |
        cp -v Wagonfile.ci Wagonfile
      working-directory: hitobito
      shell: bash

    - name: "Checkout dependency ${{ inputs.wagon_dependency_repository }} at ${{ env.WAGON_DEPENDENCY_REF }}"
      uses: actions/checkout@v4
      if: ${{ inputs.wagon_dependency_repository != '' }}
      with:
        repository: hitobito/${{ inputs.wagon_dependency_repository }}
        ref: ${{ env.WAGON_DEPENDENCY_REF }}
        path: ${{ inputs.wagon_dependency_repository }}

    - name: Checkout ${{ inputs.wagon_repository }}
      uses: actions/checkout@v4
      with:
        path: ${{ inputs.wagon_repository }}

    - name: "Create cache key"
      run: cp Gemfile.lock Gemfile.lock.backup
      working-directory: hitobito
      shell: bash

    - uses: actions/cache@v4
      with:
        path: hitobito/vendor/bundle
        key: ${{ runner.os }}-ruby-bundle-${{ hashFiles('**/Gemfile.lock.backup') }}
        restore-keys: |
          ${{ runner.os }}-ruby-bundle-

    - uses: actions/cache@v4
      if: ${{ inputs.wagon_dependency_repository != '' }}
      with:
        path: ${{ inputs.wagon_dependency_repository }}/vendor/bundle
        key: ${{ runner.os }}-ruby-bundle-${{ hashFiles('**/Gemfile.lock.backup') }}
        restore-keys: |
          ${{ runner.os }}-ruby-bundle-

    - uses: actions/cache@v4
      with:
        path: ${{ inputs.wagon_repository }}/vendor/bundle
        key: ${{ runner.os }}-ruby-bundle-${{ hashFiles('**/Gemfile.lock.backup') }}
        restore-keys: |
          ${{ runner.os }}-ruby-bundle-

    - name: "Bundle install core"
      run: |
        bundle install --jobs 4 --retry 3 --path vendor/bundle
      working-directory: hitobito
      shell: bash

    - name: "Make changes to Gemfile.lock transparent"
      run: |
        git diff Gemfile.lock || true
      working-directory: hitobito
      shell: bash

    - name: "Bundle install wagons"
      run: |
        hitobito_dir=$(realpath ./)
        for d in $hitobito_dir/../hitobito_*; do
          cd $d
          cp -v $hitobito_dir/Gemfile.lock ./
          bundle install --jobs 4 --retry 3 --path vendor/bundle
        done
      working-directory: hitobito
      shell: bash

    - uses: actions/cache@v4
      if: inputs.assets == 'true'
      with:
        path: node_modules
        key: ${{ runner.os }}-node_modules-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-node_modules-

    - name: "Yarn install"
      if: inputs.assets == 'true'
      run: |
        yarn install --frozen-lockfile
      working-directory: hitobito
      shell: bash

    - name: "Run Webpacker"
      if: inputs.assets == 'true'
      run: |
        bundle exec rake webpacker:compile
      working-directory: hitobito
      shell: bash

    - name: "Prepare DB"
      if: inputs.migrations == 'true'
      run: |
        bundle exec rake db:migrate
        bundle exec rake wagon:migrate
      working-directory: hitobito
      shell: bash
