name: 'Wagon - Rails Lint and Test'

on:
  workflow_call:
    inputs:
      wagon_repository:
        description: "Wagon repository, e.g. hitobito_pbs"
        type: string
      wagon_dependency_repository:
        description: A wagon this wagon depends on, e.g. hitobito_youth
        required: false
        default: ''
        type: string
      core_ref:
        description: Use a specific version of the core for the workflow run. Defaults to master.
        type: string
        default: ''
      wagon_dependency_ref:
        description: Use a specific version of the wagon dependency for the workflow run. Defaults to master.
        type: string
        default: ''
      main_branch:
        description: Speficy which branch should be regarded as the main branch of core and dependency wagon. Statuscope will only be notified if the core and dependency refs match this branch.
        type: string
        default: master
    secrets:
      HEARTBEAT_URL:
        description: 'URL to the heartbeat-application'
        required: true
      HEARTBEAT_TOKEN:
        description: 'Token to interact with the heartbeat-application'
        required: true

defaults:
  run:
    working-directory: hitobito

jobs:
  wagon_rubocop:
    name: rubocop
    runs-on: 'ubuntu-20.04'

    steps:
      - name: Check out core with shared setup action
        uses: actions/checkout@v4
        with:
          repository: hitobito/hitobito
          ref: ${{ inputs.core_ref }}
          path: .hitobito_core_repo
          fetch-depth: 1

      - name: 'Prepare'
        uses: ./.hitobito_core_repo/.github/actions/wagon-ci-setup
        with:
          migrations: false
          assets: false
          wagon_repository: ${{ inputs.wagon_repository }}
          wagon_dependency_repository: ${{ inputs.wagon_dependency_repository }}
          core_ref: ${{ inputs.core_ref }}
          wagon_dependency_ref: ${{ inputs.wagon_dependency_ref }}

      - name: ${{ inputs.wagon_repository }} rubocop
        working-directory: ${{ inputs.wagon_repository }}
        run: |
          bundle exec rake app:rubocop

  wagon_specs:
    name: specs
    runs-on: 'ubuntu-20.04'
    env:
      HEADLESS: true
      RAILS_DB_ADAPTER: postgresql
      RAILS_DB_HOST: 127.0.0.1
      RAILS_DB_PORT: 5432
      RAILS_DB_USERNAME: hitobito
      RAILS_DB_PASSWORD: hitobito
      RAILS_DB_NAME: hitobito_test
      RAILS_TEST_DB_NAME: hitobito_test
      RAILS_ENV: test

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: hitobito
          POSTGRES_PASSWORD: hitobito
          POSTGRES_DB: hitobito_test
        ports:
          - '5432:5432'
        options: >-
          --health-cmd "pg_isready -U hitobito"
          --health-interval 10s
          --health-timeout 10s
          --health-retries 10
      memcached:
        image: 'memcached'
        ports: [ '11211:11211' ]

    steps:
      - name: Check out the core, which contains the shared setup action
        uses: actions/checkout@v4
        with:
          repository: hitobito/hitobito
          ref: ${{ inputs.core_ref }}
          path: .hitobito_core_repo
          fetch-depth: 1

      - name: 'Prepare'
        uses: ./.hitobito_core_repo/.github/actions/wagon-ci-setup
        with:
          wagon_repository: ${{ inputs.wagon_repository }}
          wagon_dependency_repository: ${{ inputs.wagon_dependency_repository }}
          core_ref: ${{ inputs.core_ref }}
          wagon_dependency_ref: ${{ inputs.wagon_dependency_ref }}

      - name: Run ${{ inputs.wagon_repository }} specs
        working-directory: ${{ inputs.wagon_repository }}
        run: |
          bundle exec rake app:ci:setup:rspec spec:without_features

  wagon_feature_specs:
    name: feature specs
    runs-on: 'ubuntu-20.04'
    env:
      HEADLESS: true
      RAILS_DB_ADAPTER: postgresql
      RAILS_DB_HOST: 127.0.0.1
      RAILS_DB_PORT: 5432
      RAILS_DB_USERNAME: hitobito
      RAILS_DB_PASSWORD: hitobito
      RAILS_DB_NAME: hitobito_test
      RAILS_TEST_DB_NAME: hitobito_test
      RAILS_ENV: test

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: hitobito
          POSTGRES_PASSWORD: hitobito
          POSTGRES_DB: hitobito_test
        ports:
          - '5432:5432'
        options: >-
          --health-cmd "pg_isready -U hitobito"
          --health-interval 10s
          --health-timeout 10s
          --health-retries 10
      memcached:
        image: 'memcached'
        ports: [ '11211:11211' ]

    steps:
      - name: Check out core with shared setup action
        uses: actions/checkout@v4
        with:
          repository: hitobito/hitobito
          ref: ${{ inputs.core_ref }}
          path: .hitobito_core_repo
          fetch-depth: 1

      - name: 'Prepare'
        uses: ./.hitobito_core_repo/.github/actions/wagon-ci-setup
        with:
          wagon_repository: ${{ inputs.wagon_repository }}
          wagon_dependency_repository: ${{ inputs.wagon_dependency_repository }}
          core_ref: ${{ inputs.core_ref }}
          wagon_dependency_ref: ${{ inputs.wagon_dependency_ref }}

      - name: Check if there are any feature specs in ${{ inputs.wagon_repository }}
        id: check-wagon-feature-specs
        working-directory: ${{ inputs.wagon_repository }}
        run: |
          if [ -d "spec/features" ]; then
            echo "feature_specs_exist=1" >> "$GITHUB_OUTPUT"
          fi

      - name: Run ${{ inputs.wagon_repository }} feature specs
        if: ${{ steps.check-wagon-feature-specs.outputs.feature_specs_exist }}
        working-directory: ${{ inputs.wagon_repository }}
        run: |
          bundle exec rake app:ci:setup:rspec app:spec:features:lenient

      - name: 'Make capybara output downloadable'
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: capybara-output-wagon
          path: |
            hitobito/tmp/capybara

  notify_statuscope:
    uses: ./.github/workflows/notify-statuscope.yml
    needs: [ wagon_rubocop, wagon_specs, wagon_feature_specs ]
    if: ( success() || failure() ) && ( github.ref_name == 'master' ) && ( (inputs.core_ref || inputs.main_branch) == inputs.main_branch ) && ( (inputs.wagon_dependency_ref || inputs.main_branch) == inputs.main_branch )
    with:
      repository: ${{ inputs.wagon_repository }}
      test_result: ${{ needs.wagon_rubocop.result == 'success' && needs.wagon_specs.result == 'success' && needs.wagon_feature_specs.result == 'success' }}
    secrets:
      HEARTBEAT_URL: ${{ secrets.HEARTBEAT_URL }}
      HEARTBEAT_TOKEN: ${{ secrets.HEARTBEAT_TOKEN }}
