name: Generate and push an SBOM dependency list

on:
  workflow_call:
    inputs:
      project_name:
        type: string
        description: "Project name to report to dependency track"
        required: true
      dependency_track_url:
        type: string
        description: "Base URL of the dependency track instance"
        required: true
    secrets:
      dependency_track_api_key:
        description: "API key to use for sending data to dependency track"
        required: true

jobs:
  generate-and-push-sbom:
    runs-on: 'ubuntu-22.04'
    env:
      HEADLESS: true
      RAILS_DB_ADAPTER: postgresql
      RAILS_DB_HOST: 127.0.0.1
      RAILS_DB_PORT: 5432
      RAILS_DB_USERNAME: hitobito
      RAILS_DB_PASSWORD: hitobito
      RAILS_DB_NAME: hitobito_test
      RAILS_TEST_DB_NAME: hitobito_test

    services:
      postgres:
        image: 'postgres:16'
        env:
          POSTGRES_USER: hitobito
          POSTGRES_PASSWORD: hitobito
          POSTGRES_DB: hitobito_test
        ports:
          - '5432:5432'
        options: >-
          --health-cmd "pg_isready -U hitobito"
          --health-interval 10s
          --health-timeout 10s
          --health-retries 10
      memcached:
        image: 'memcached'
        ports: [ '11211:11211' ]

    steps:
      - name: 'Checkout composition repository'
        uses: actions/checkout@v4

      - name: 'Checkout hitobito core submodule and wagon submodules'
        run: git submodule update --init --recursive

      - name: 'Set up Ruby'
        env:
          ImageOS: ubuntu20
        uses: ruby/setup-ruby@v1
        with:
          working-directory: hitobito

      - name: 'Set up Node'
        uses: actions/setup-node@v2
        with:
          node-version: '20'

      - name: 'Setup OS'
        run: |
          sudo apt-get -qq update
          echo "ruby version: $(ruby -v)"
          echo "node version: $(node -v)"
          echo "yarn version: $(yarn -v)"

      - name: 'Copy Wagonfile.ci'
        working-directory: hitobito
        run: |
          cp -v Wagonfile.ci Wagonfile

      - name: 'Create cache key'
        working-directory: hitobito
        run: cp Gemfile.lock Gemfile.lock.backup

      - uses: actions/cache@v4
        with:
          path: hitobito/vendor/bundle
          key: ${{ runner.os }}-ruby-bundle-${{ hashFiles('**/Gemfile.lock.backup') }}
          restore-keys: |
            ${{ runner.os }}-ruby-bundle-

      - uses: actions/cache@v4
        if: ${{ inputs.wagon_dependency_repository != '' }}
        with:
          path: ${{ inputs.wagon_dependency_repository }}/vendor/bundle
          key: ${{ runner.os }}-ruby-bundle-${{ hashFiles('**/Gemfile.lock.backup') }}
          restore-keys: |
            ${{ runner.os }}-ruby-bundle-

      # Commented out for now because we would have to loop over all used wagons doing this
#      - uses: actions/cache@v4
#        with:
#          path: ${{ env.WAGON_NAME }}/vendor/bundle
#          key: ${{ runner.os }}-ruby-bundle-${{ hashFiles('**/Gemfile.lock.backup') }}
#          restore-keys: |
#            ${{ runner.os }}-ruby-bundle-

      - name: 'Bundle install core'
        working-directory: hitobito
        run: |
          bundle install --jobs 4 --retry 3 --path vendor/bundle

      - name: 'Make changes to Gemfile.lock transparent'
        working-directory: hitobito
        run: |
          git diff Gemfile.lock || true

#      - name: 'Bundle install wagons'
#        run: |
#          hitobito_dir=$(realpath ./)
#          for d in $hitobito_dir/../hitobito_*; do
#            cd $d
#            cp -v $hitobito_dir/Gemfile.lock ./
#            bundle install --jobs 4 --retry 3 --path vendor/bundle
#          done

      - uses: actions/cache@v4
        with:
          path: hitobito/node_modules
          key: ${{ runner.os }}-node_modules-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node_modules-

      - name: 'Yarn install'
        working-directory: hitobito
        run: |
          yarn install --frozen-lockfile

      - name: 'Remove installed dependency code, because lockfiles in there would yield false positives with cdxgen. We are only interested in our own lockfiles.'
        working-directory: hitobito
        run: |
          rm -rf vendor
          rm -rf node_modules

      - name: 'Generate SBOM for ruby dependencies'
        working-directory: hitobito
        env:
          SCAN_DEBUG_MODE: debug
        run: |
          npm install -g @cyclonedx/cdxgen@10
          cdxgen -o ./sbom-ruby.json -t ruby --spec-version 1.4 .

      - name: 'Generate SBOM for npm dependencies'
        working-directory: hitobito
        run: |
          npm install -g @cyclonedx/cdxgen@10
          cdxgen -o ./sbom-npm.json -t npm --spec-version 1.4 .

      - name: 'Merge frontend and backend SBOMs'
        working-directory: hitobito
        run: |
          docker run --rm -v $(pwd):/data cyclonedx/cyclonedx-cli merge --input-files data/sbom-ruby.json data/sbom-npm.json --output-file data/sbom.json

      - name: 'Push merged SBOM to dependency track'
        working-directory: hitobito
        run: |
          curl --verbose -s --location --request POST ${{ inputs.dependency_track_url }}/api/v1/bom \
          --header "X-Api-Key: ${{ secrets.dependency_track_api_key }}" \
          --header "Content-Type: multipart/form-data" \
          --form "autoCreate=true" \
          --form "projectName=${{ inputs.project_name }}" \
          --form "projectVersion=latest" \
          --form "bom=@sbom.json"

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: sboms
          path: |
            ./hitobito/sbom-npm.json
            ./hitobito/sbom-ruby.json
            ./hitobito/sbom.json
