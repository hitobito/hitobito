name: "Composition Repo - Determine Settings"

on:
  workflow_call:
    inputs:
      repository:
        description: "Composition repository, e.g. hitobito/ose_composition_sjas"
        required: true
        type: string
      stage:
        description: "Stage of release to be prepared, e.g. integration"
        required: true
        type: string
      release_type:
        description: "Type of Release: regular, patch or custom"
        required: false
        type: string
        default: "regular"
      prevent_prepare:
        description: "Only show commands to prepare, do not execute them"
        required: false
        type: boolean
        default: false
      prevent_push:
        description: "Only build the image, do not push it"
        required: false
        type: boolean
        default: false
      prevent_deployment:
        description: "Do not update the deployment-repo"
        required: false
        type: boolean
        default: false

    outputs:
      project:
        value: ${{ jobs.settings.outputs.project }}
      repo_name:
        value: ${{ jobs.settings.outputs.repo_name }}
      repo_url:
        value: ${{ jobs.settings.outputs.repo_url }}
      composition_branch:
        value: ${{ jobs.settings.outputs.composition_branch }}
      release_stage:
        value: ${{ jobs.settings.outputs.release_stage }}
      release_type:
        value: ${{ jobs.settings.outputs.release_type }}
      namespace_name:
        value: ${{ jobs.settings.outputs.namespace_name }}
      dry_run:
        value: ${{ jobs.settings.outputs.dry_run }}
      push_image:
        value: ${{ jobs.settings.outputs.push_image }}
      update_deployments:
        value: ${{ jobs.settings.outputs.update_deployments }}

jobs:
  settings:
    runs-on: ubuntu-latest

    outputs:
      project: ${{ steps.determine.outputs.project }}
      repo_name: ${{ steps.determine.outputs.repo_name }}
      repo_url: ${{ steps.determine.outputs.repo_url }}
      composition_branch: ${{ steps.determine.outputs.branch }}
      release_stage: ${{ steps.determine.outputs.stage }}
      release_type: ${{ steps.determine.outputs.release_type }}
      namespace_name: ${{ steps.determine.outputs.namespace_name }}
      dry_run: ${{ steps.determine.outputs.dry_run }}
      push_image: ${{ steps.determine.outputs.push_image }}
      update_deployment: ${{ steps.determine.outputs.update_deployment }}

    steps:
      - name: Infer project-name and stage-settings
        id: determine
        env:
          STAGE: ${{ inputs.stage }}
          REPO: ${{ inputs.repository }}
          RELEASE_TYPE: ${{ inputs.release_type }}
          DRY_RUN: ${{ inputs.prevent_prepare }}
          DRY_PUSH: ${{ inputs.prevent_push }}
          DRY_DEPLOY: ${{ inputs.prevent_deployment }}
        run: |
          echo "stage=${STAGE}" >> "$GITHUB_OUTPUT"
          echo "repo_name=${REPO}" >> "$GITHUB_OUTPUT"

          echo "repo_url=https://github.com/${REPO}.git" >> "$GITHUB_OUTPUT"

          project="${REPO##hitobito/ose_composition_}"
          echo "project=${project}" >> "$GITHUB_OUTPUT"

          if [[ "${DRY_RUN}" = 'true' ]]; then
            echo 'dry_run=-n' >> "$GITHUB_OUTPUT"
          else
            echo 'dry_run=' >> "$GITHUB_OUTPUT"
          fi
          if [[ "${DRY_PUSH}" = 'true' ]]; then
            echo 'push_image=false' >> "$GITHUB_OUTPUT"
          else
            echo 'push_image=true' >> "$GITHUB_OUTPUT"
          fi
          if [[ "${DRY_DEPLOY}" = 'true' ]]; then
            echo 'update_deployment=false' >> "$GITHUB_OUTPUT"
          else
            echo 'update_deployment=true' >> "$GITHUB_OUTPUT"
          fi

          case $STAGE in
            production)
              echo "branch=production" >> "$GITHUB_OUTPUT"
              echo "release_type=${RELEASE_TYPE}" >> "$GITHUB_OUTPUT"
              echo "namespace_name=hit-${project//_/-}-prod" >> "$GITHUB_OUTPUT"
            ;;

            integration)
              echo "branch=devel" >> "$GITHUB_OUTPUT"
              echo "release_type=integration" >> "$GITHUB_OUTPUT"
              echo "namespace_name=hit-${project//_/-}-int" >> "$GITHUB_OUTPUT"
            ;;
          esac;
